//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = '';
  strings.forEach((string, i) => {
    str += string + (args[i] || '');
  });
  return str;
}
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any };
  JSON: { input: any; output: any };
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};

export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  actualites: Actualites;
  actualitesConnection: ActualitesConnection;
};

export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};

export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};

export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};

export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryActualitesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryActualitesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ActualitesFilter>;
};

export type DocumentFilter = {
  actualites?: InputMaybe<ActualitesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};

export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Actualites | Folder;

export type ActualitesImage = {
  __typename?: 'ActualitesImage';
  url?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
};

export type Actualites = Node &
  Document & {
    __typename?: 'Actualites';
    title?: Maybe<Scalars['String']['output']>;
    pubDate?: Maybe<Scalars['String']['output']>;
    author?: Maybe<Scalars['String']['output']>;
    image?: Maybe<ActualitesImage>;
    tag?: Maybe<Scalars['String']['output']>;
    body?: Maybe<Scalars['JSON']['output']>;
    id: Scalars['ID']['output'];
    _sys: SystemInfo;
    _values: Scalars['JSON']['output'];
  };

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ActualitesImageFilter = {
  url?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ActualitesFilter = {
  title?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<ActualitesImageFilter>;
  tag?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ActualitesConnectionEdges = {
  __typename?: 'ActualitesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Actualites>;
};

export type ActualitesConnection = Connection & {
  __typename?: 'ActualitesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ActualitesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateActualites: Actualites;
  createActualites: Actualites;
};

export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};

export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};

export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};

export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};

export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};

export type MutationUpdateActualitesArgs = {
  relativePath: Scalars['String']['input'];
  params: ActualitesMutation;
};

export type MutationCreateActualitesArgs = {
  relativePath: Scalars['String']['input'];
  params: ActualitesMutation;
};

export type DocumentUpdateMutation = {
  actualites?: InputMaybe<ActualitesMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  actualites?: InputMaybe<ActualitesMutation>;
};

export type ActualitesImageMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type ActualitesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<ActualitesImageMutation>;
  tag?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ActualitesPartsFragment = {
  __typename: 'Actualites';
  title?: string | null;
  pubDate?: string | null;
  author?: string | null;
  tag?: string | null;
  body?: any | null;
  image?: {
    __typename: 'ActualitesImage';
    url?: string | null;
    alt?: string | null;
  } | null;
};

export type ActualitesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;

export type ActualitesQuery = {
  __typename?: 'Query';
  actualites: {
    __typename: 'Actualites';
    id: string;
    title?: string | null;
    pubDate?: string | null;
    author?: string | null;
    tag?: string | null;
    body?: any | null;
    _sys: {
      __typename?: 'SystemInfo';
      filename: string;
      basename: string;
      hasReferences?: boolean | null;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    image?: {
      __typename: 'ActualitesImage';
      url?: string | null;
      alt?: string | null;
    } | null;
  };
};

export type ActualitesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ActualitesFilter>;
}>;

export type ActualitesConnectionQuery = {
  __typename?: 'Query';
  actualitesConnection: {
    __typename?: 'ActualitesConnection';
    totalCount: number;
    pageInfo: {
      __typename?: 'PageInfo';
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: 'ActualitesConnectionEdges';
      cursor: string;
      node?: {
        __typename: 'Actualites';
        id: string;
        title?: string | null;
        pubDate?: string | null;
        author?: string | null;
        tag?: string | null;
        body?: any | null;
        _sys: {
          __typename?: 'SystemInfo';
          filename: string;
          basename: string;
          hasReferences?: boolean | null;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        image?: {
          __typename: 'ActualitesImage';
          url?: string | null;
          alt?: string | null;
        } | null;
      } | null;
    } | null> | null;
  };
};

export const ActualitesPartsFragmentDoc = gql`
  fragment ActualitesParts on Actualites {
    __typename
    title
    pubDate
    author
    image {
      __typename
      url
      alt
    }
    tag
    body
  }
`;
export const ActualitesDocument = gql`
  query actualites($relativePath: String!) {
    actualites(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          hasReferences
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...ActualitesParts
    }
  }
  ${ActualitesPartsFragmentDoc}
`;
export const ActualitesConnectionDocument = gql`
  query actualitesConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: ActualitesFilter
  ) {
    actualitesConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              hasReferences
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...ActualitesParts
        }
      }
    }
  }
  ${ActualitesPartsFragmentDoc}
`;
export type Requester<C = {}> = <R, V>(
  doc: DocumentNode,
  vars?: V,
  options?: C
) => Promise<R>;
export function getSdk<C>(requester: Requester<C>) {
  return {
    actualites(
      variables: ActualitesQueryVariables,
      options?: C
    ): Promise<{
      data: ActualitesQuery;
      errors?: {
        message: string;
        locations: { line: number; column: number }[];
        path: string[];
      }[];
      variables: ActualitesQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: ActualitesQuery;
          errors?: {
            message: string;
            locations: { line: number; column: number }[];
            path: string[];
          }[];
          variables: ActualitesQueryVariables;
          query: string;
        },
        ActualitesQueryVariables
      >(ActualitesDocument, variables, options);
    },
    actualitesConnection(
      variables?: ActualitesConnectionQueryVariables,
      options?: C
    ): Promise<{
      data: ActualitesConnectionQuery;
      errors?: {
        message: string;
        locations: { line: number; column: number }[];
        path: string[];
      }[];
      variables: ActualitesConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: ActualitesConnectionQuery;
          errors?: {
            message: string;
            locations: { line: number; column: number }[];
            path: string[];
          }[];
          variables: ActualitesConnectionQueryVariables;
          query: string;
        },
        ActualitesConnectionQueryVariables
      >(ActualitesConnectionDocument, variables, options);
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from 'tinacms/dist/client';

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string;
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>;
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl;
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/');
      url = client.apiUrl.substring(0, index + 1) + options.branch;
    }
    const data = await client.request(
      {
        query: doc,
        variables: vars,
        url,
      },
      options
    );

    return {
      data: data?.data,
      errors: data?.errors,
      query: doc,
      variables: vars || {},
    };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: 'http://localhost:4001/graphql',
        queries,
      })
    )
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};
